import numpy as np
import gmpy2 as gm
def crack(N, ns, cs):
    M = np.ones((N, N))
    M = M.tolist()
    for i in range(N):
        M[i][i] = 1
        for j in range(N):
            if i != j:
                M[i][j] = gm.gcd(ns[i], ns[j])
                M[i][i] *= M[i][j]
        M[i][i] = ns[i] / M[i][i]

    nsns = [1] * 4
    for i in range(N):
        for j in range(N):
            nsns[i] *= M[i][j]

    index = np.ones((N, N))
    index = index.tolist()

    for i in range(N):
        for j in range(N):
            index[i][j] = 1
            for k in range(N):
                if k != j:
                    index[i][j] *= gm.invert(M[i][k], M[i][j] - 1)

    cc = np.ones((N, N))
    cc = cc.tolist()
    for i in range(N):
        for j in range(N):
            cc[i][j] = pow(cs[i], index[i][j], M[i][j])

    mms = [0] * N
    for i in range(N):
        for j in range(N):
            fac = cc[i][j]
            for k in range(N):
                if k != j:
                    fac *= (M[i][k] * gm.invert(M[i][k], M[i][j]))
            mms[i] += fac % ns[i]
        mms[i] = mms[i] % ns[i]
    return mms

def main():
    cs = [0] * 4
    ns = [0] * 4
    cs[0] = 0x1748f7f8e9f6f26c7f22e95ca78055cc9c667705adef326be42ce023e2750e0edc037f2217c91c0c33f95724cf5d921591216e01fed07ba860e203a581558d7483b91fe6177bd2e0bd43076ae573aa8b3a0995b2fef9b8c956d754c39af6cef189662ea1ea4be855b0644d47887478af74dfc6f3a7280060eb2f44efb54e7fb60381b1204ab477f93942fe35d7c00ed48066d7012dd503a32522c9b034f2d1475ca3538fbc4cd1ce36a204e3fc426f1e31220d1f25fefb019424cc142510cf38e8ef1eb1e00cd6f588d2d576c8dfffc9616809b4da80f36f48cc85bea768939c82b2e624dacf1e51b5dffcb6af0fd3051030db58baaab4ef36341eaca04d1ffL
    ns[0] = 0x4bcedf2f57820578061643c0cca214266ebc5fd0b9206b5af99ce3a88455400dad0a36a0a8c0b7fe27c9263a52fc4981fc8954c37a9b556a1de68951c4b6c82a1956a45e175f4f2e9d6bf15af92cca1a2cc0161ea9d3e3e81c9793408ce2b7b28b69b0621fd95b000ebe7042a4cf436e5c8b9594a95eebd821382e8447446bc989b5109664e58e563d9b507baa1a3f989692be643a76c0dd6592fa30e1b5b25d722a401152d4b9a9f55320375a82e483d4f14c904db02b96047dbc633ddda9ec04979a54ab469d437a1cb9749e9de51ae41a458e4b02120ff440fee2c07659a249a6812950fd63e3e6ad90b2e90973097f5e9247a9d9376fef121b4bafb08e7L
    cs[1] = 0x309645ca5609b145bbb1e9f8a5a2e50368b4f7510f2b9acd1f42b8c0a98ddc27544354cb0f377f37e544a896887dfe0a19f7f70bd2afcc424a1281370f3a229d9c3fe0f8bc4d87b667697d188faf88576587d893ac334e32b5c0d1111279b6a87a0e8c12f89a84b0694dd966667e603ed3d439e58b9ead5ce50984088de33ea537b75e3c2964baecd98248cff66ec66346d2cbc639ea2934e43149d5af30d003ae272eb1f4f219d93e773b93e0030226c1afbc8aa99af068fc0984be75798a20482d34c7183b9fde9f0bd91906a667e435515d4613b085bedbeebeda1c6196a35daace2376552d4f081dcddb3e623849bdaadef075792c6e82a7bcd1295b980L
    ns[1] = 0x7682639d83f55e888593263709022e3f8e5527679e43d67497b67a0715564718365f6a8de62b34d3845254b3c1f54784850c7e80192c3dc5ac6db0b76f0f9f424721439eabde70223916ad7e68043d90f8f2db1147baf768975d6016c8ae0b41f34f73f5b680a9e9c68290cc27e29ed4b513fb5b00a8d33d82f0c5dd811fb363f18700eac815a8d875825e86af8fff5c7b48fb4d71622bfdb61a102693493f261c777a246786aa094a60f406ebe0643a11d1677b7a5b652d8fdf2462c4ed10300c9ea64c04b05c285cded772cc3ccd0b4e21433882ca6d44360e642e67d9f7bd8af5fb6526ab68953b8f0849a05c63c1101c8c2c3a8504471c58859cd1aeb27L
    cs[2] = 0x15e5289fde3971ec82410b7093f01655fbc26219b457c8b3b2cb0868f6e5873340bb2d42e55682d2bcb881dd67cc6014965c5958f767e57483237003918a618449f9bb6a84132c668ed8be8c0629022185a488d2979d1f42bdee185b1da19e57e4a4998ecea213a3e60b5578531c91e11519b491d27a39467206bfd8084f07f8fe45d9b27343d365ceabd6244653c682cc878599c82223e931789838b8c1d8b59e6132a3c9ddcacd0fa6316836357f7bf4eefa89bea04ab4f658e5c9064019d1c2dae2c9241af198ae03ba3c0f34a834fb96d5126b1122db16e2f0cc5721b73a52d17458b5c1d764f78c909142e911ca4ff53c041dfcf482c395a3c5741795L
    ns[2] = 0x3e9cc5512262438b8a95b11e54cfa23344bb11c9cf15677334b58fb84e309b5ba70cb75cba81b6dd58f55262c77cd63b0e8fe701d52b326f5827ba617173bfb1d64afbd0fc77c8dc9c7ec6dd651d1696c2a741f17270856cbbd498419fffc5386d8a84f5419932b71dfc4f59a10c2c68b7c7bd263beef434b506e1157f427f7101a2bb9c52cba572222f6dc54ec156ad4bdb3fa2e6b14a4f0db8ab03ffa013dcc06f96f774a52223c3d841c7c641094dac2565b50d9fe367b3ebf2c15b2f6fb1f0df9d270c139a7e79f82eb43be5c029262e6788b1283ffeb0d205eca8cf64a9d421bdbee741a39a454fa64bcd24c597ebf49e3b0b72932315c1505f5e8727L
    cs[3] = 0x15feb312a555238dc2ef71f3064d25ef25c2704dae26dca3f1e3e8e1ed5c5e2b4bb10a5981feb9c83bef6082964d100ea28e05e996a5669a954258c3891a1a74a17f16845758791f2f5af8a7a51bf2765a49a761eb74f52af8631bd7cedbb1ac346cfa71a2720516aaaaa5d3a131b805915a5d9d13823b9b7575427bbc7718d42cbc44a06585ebef835ab009c912074c43e2e4c1d229add0c84ed378a6f324f9b3ada94b8c4debdf2b0d16292d7be400c3bb9d5494e73a55bc47a3e5d6e845dca7a296fbda187d3a70349a83afc7a7553fe48fb97cc6f171b8bf77ffba39361a84b8db77ad258c6fdfe53652ce4eee52ab26f9c968f5be0822e7bfc321400d1L
    ns[3] = 0x161a3792a78b9c61b75f0e98b99eeea6dc0fedbd4bb0994dd54b2e60f55a039180c98f2aa1a47afe0f07831cdb03cfb05e1878854262f6a5664f8124defc88786c0c15abde60e39cc300f3d0f22757d8914e94f3b324f5262fd188476a403fa24609220dad6012f7cb34231b82b055af34d09e3d2b55d88cd6625c29f98f84b7ad9cefdd3a24a04875cfa8cad00f6a0eca292648b78c28a4714c98000b5dfdb5a4dcd90e38ec529b6c9fb815130f202221d1fa36e7483ee632f98aa3df95b2118a254f8a01ebd7c22ca99ed97d89e6eb8d6f0c98a732d679e9869fb702cae507ba297fcc35ad08e4e2ef8f4166396eed51ec046e36e8d6ff34e3164088281e3L

    ms = crack(4, ns, cs)
    for i in ms:
        print hex(i)

if __name__ == '__main__':
    main()